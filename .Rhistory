dt <- cbind(dt, download(coin)[,-1])
}
dt
}
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "AVAX"),
start_time = '2023-01-02',
end_time = '2023-01-03', interval = '1s')
dt
?sec
?seq
start_time = Sys.time() - lubridate::dmonths(2)
end_time = Sys.time() - lubridate::ddays(2)
start_time
seq(start_time, end_time, by = 'sec')
seq(start_time, end_time, by = 'min')
source("C:/Users/erich/Documents/FePsy/R/packages/martingalebot/R/get_binance_klines_from_csv_multi.R")
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "AVAX"),
start_time = '2023-01-02',
end_time = '2023-01-03', interval = '1s')
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "AVAX"),
start_time = '2023-01-02',
end_time = '2023-01-03', interval = '1m')
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "AVAX"),
start_time = '2022-01-02',
end_time = '2023-01-03', interval = '1m')
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "PYR"),
start_time = '2023-01-02',
end_time = '2023-01-03', interval = '1m')
dt
na.omit(dt)
dt = get_binance_klines_from_csv_multi(coins = c("MATIC", "SOL", "AVAX"),
start_time = '2023-01-02',
end_time = '2023-01-03', interval = '1s')
dt
na.omit(dt)
library(martingalebot)
dat = get_binance_prices_from_csv()
dat
backtest(data = dat)
backtest(data = dat, plot = T)
readClipboard()
cat(readClipboard(), ', ')
cat(readClipboard(), sep = ', ')
cat(readClipboard(), sep = ', ')
cat(readClipboard(), sep = ', ')
readClipboard()
sub(readClipboard(), ' ', ', ')
sub(' ', ', ', readClipboard())
sub(' ', '; ', readClipboard())
gsub(' ', '; ', readClipboard())
readClipboard()
readClipboard()
cat(readClipboard(), '; ')
cat(readClipboard(), sep = '; ')
cat(readClipboard(), sep = '; ')
as.ordered(letters[c(1:3, 4:6)])
as.ordered(letters[c(1:4)])
median(as.ordered(letters[c(1:4)]))
2701*0.26
library(martingalebot)
Can you rewrite this function using the data.table package?
#Can you rewrite this function using the data.table package?
add_rsi <- function(data, time_period = '1 hour', n = 7) {
index <- c('3 minutes' = 180, '5 minutes' = 300, '15 minutes' = 900,
'30 minutes' = 1800, '1 hour' = 3600, '2 hours' = 7200,
'4 hours' = 14400, '8 hours' = 28800, '1 day' = 24 *3600)
interval <- index[time_period]
rsi <- data |>
dplyr::group_by(x = as.integer(time) %/% interval) |>
dplyr::slice_tail(n = 1) |>
dplyr::ungroup() |>
dplyr::mutate(RSI = TTR::RSI(price, n = n)) |>
dplyr::select(time, RSI)
dplyr::left_join(data, rsi, by = 'time') |>
tidyr::fill(RSI, .direction = 'up')
}
dat = get_binance_klines_from_csv()
dat = get_binance_klines_from_csv(end_time = '2023-08-01')
dat
add_rsi(dat)
dat = get_binance_prices_from_csv()
dat = get_binance_prices_from_csv(end_time = '2023-08-01')
dat
add_rsi(dat)
x = add_rsi(dat)
library(data.table)
library(TTR)
add_rsi <- function(data, time_period = '1 hour', n = 7) {
index <- c('3 minutes' = 180, '5 minutes' = 300, '15 minutes' = 900,
'30 minutes' = 1800, '1 hour' = 3600, '2 hours' = 7200,
'4 hours' = 14400, '8 hours' = 28800, '1 day' = 24 *3600)
interval <- index[time_period]
setDT(data)
rsi <- data[, .(RSI = TTR::RSI(price, n=n)), by=.(x=as.integer(time) %/% interval)
][, x:=NULL]
data[rsi, on=.(time), RSI:=i.RSI][is.na(RSI), RSI := RSI[.I-1]]
data
}
add_rsi(dat)
add_rsi <- function(data, time_period = '1 hour', n = 7) {
# create an index of time periods and their corresponding intervals
index <- data.table(time_period = c('3 minutes', '5 minutes', '15 minutes', '30 minutes', '1 hour', '2 hours', '4 hours', '8 hours', '1 day'),
interval = c(180, 300, 900, 1800, 3600, 7200, 14400, 28800, 24 * 3600))
# join the data with the index to get the appropriate interval for each time period
data <- merge(data, index, by = 'time_period')
# group the data by the interval and calculate the RSI for each group
data[, RSI := TTR::RSI(price, n = n), by = .(interval)]
# fill in any missing values with the previous value
data[, RSI := na.locf(RSI, fromLast = TRUE), by = .(interval)]
return(data)
}
add_rsi(dat)
add_rsi <- function(data, time_period = '1 hour', n = 7) {
index <- c('3 minutes' = 180, '5 minutes' = 300, '15 minutes' = 900,
'30 minutes' = 1800, '1 hour' = 3600, '2 hours' = 7200,
'4 hours' = 14400, '8 hours' = 28800, '1 day' = 24 *3600)
interval <- index[time_period]
setDT(data)
data[, x := as.integer(time) %/% interval]
rsi <- data[, .SD[.N], by = x][, RSI := RSI(price, n = n), by = x][, c('time', 'RSI'), with = FALSE]
data <- merge(data, rsi, by = 'time', all.x = TRUE)
for(i in nrow(data):1) {
if(is.na(data$RSI[i])) {
data$RSI[i] <- data$RSI[i+1]
}
}
return(data)
}
add_rsi(dat)
add_rsi <- function(data, time_period = ‘1 hour’, n = 7) { index <- c(‘3 minutes’ = 180, ‘5 minutes’ = 300, ‘15 minutes’ = 900, ‘30 minutes’ = 1800, ‘1 hour’ = 3600, ‘2 hours’ = 7200, ‘4 hours’ = 14400, ‘8 hours’ = 28800, ‘1 day’ = 24 *3600) interval <- index[time_period] data <- as.data.table(data) rsi <- data[, .SD[.N], by = .(x = as.integer(time) %/% interval)][ , RSI := TTR::RSI(price, n = n)][ , .(time, RSI)] data[rsi, on = .(time), RSI := i.RSI][ , RSI := zoo::na.locf(RSI)] }
add_rsi <- function(data, time_period = ‘1 hour’, n = 7) { index <- c(‘3 minutes’ = 180, ‘5 minutes’ = 300, ‘15 minutes’ = 900, ‘30 minutes’ = 1800, ‘1 hour’ = 3600, ‘2 hours’ = 7200, ‘4 hours’ = 14400, ‘8 hours’ = 28800, ‘1 day’ = 24 *3600) interval <- index[time_period] data <- as.data.table(data) rsi <- data[, .SD[.N], by = .(x = as.integer(time) %/% interval)][ , RSI := TTR::RSI(price, n = n)][ , .(time, RSI)] data[rsi, on = .(time), RSI := i.RSI][ , RSI := zoo::na.locf(RSI)] }
add_rsi <- function(data, time_period = ‘1 hour’, n = 7) { index <- c(‘3 minutes’ = 180, ‘5 minutes’ = 300, ‘15 minutes’ = 900, ‘30 minutes’ = 1800, ‘1 hour’ = 3600, ‘2 hours’ = 7200, ‘4 hours’ = 14400, ‘8 hours’ = 28800, ‘1 day’ = 24 *3600) interval <- index[time_period] data <- as.data.table(data) rsi <- data[, .SD[.N], by = .(x = as.integer(time) %/% interval)][ , RSI := TTR::RSI(price, n = n)][ , .(time, RSI)] data[rsi, on = .(time), RSI := i.RSI][ , RSI := zoo::na.locf(RSI)] }
add_rsi <- function(data, time_period = “1 hour”, n = 7) { index <- c(“3 minutes” = 180, “5 minutes” = 300, “15 minutes” = 900, “30 minutes” = 1800, “1 hour” = 3600, “2 hours” = 7200, “4 hours” = 14400, “8 hours” = 28800, “1 day” = 24 *3600) interval <- index[time_period] data <- as.data.table(data) rsi <- data[, .SD[.N], by = .(x = as.integer(time) %/% interval)][ , RSI := TTR::RSI(price, n = n)][ , .(time, RSI)] data[rsi, on = .(time), RSI := i.RSI][ , RSI := zoo::na.locf(RSI)] }
add_rsi <- function(data, time_period = “1 hour”, n = 7) { index <- c(“3 minutes” = 180, “5 minutes” = 300, “15 minutes” = 900, “30 minutes” = 1800, “1 hour” = 3600, “2 hours” = 7200, “4 hours” = 14400, “8 hours” = 28800, “1 day” = 24 *3600) interval <- index[time_period] data <- as.data.table(data) rsi <- data[, .SD[.N], by = .(x = as.integer(time) %/% interval)][ , RSI := TTR::RSI(price, n = n)][ , .(time, RSI)] data[rsi, on = .(time), RSI := i.RSI][ , RSI := zoo::na.locf(RSI)] }
install.packages('furrr')
install.packages('progressr')
install.packages('binancer')
install.packages('TTR')
install.packages(tidyquant)
install.packages('tidyquant')
install.packages('plotly')
library(martingalebot)
get_binance_klines(interval = '1M')
get_binance_klines(interval = '1M', start_time = Sys.Date() - Years(10))
get_binance_klines(interval = '1M', start_time = Sys.Date() - years(10))
lubridate::year(10)
lubridate::years(10)
get_binance_klines(interval = '1M', start_time = Sys.Date() - lubridate::years(10))
?get_binance_klines
binance_klines('BTC')
library(binancer)
binance_klines('BTC')
binance_klines('BTCUSDT')
install.packages('crypto2')
crypto2::crypto_history()
one_coin <- crypto_history(limit = 1)
library(crypto2)
one_coin <- crypto_history(limit = 1)
one-coin
one_coin
library(martingalebot)
get_binance_klines_from_csv('FXSUSDT')
dat <- get_binance_klines_from_csv('FXSUSDT', Sys.time() - lubridate::dmonths(6))
backtest(dat)
grid_search(data = dat)
grid_search(data = dat)
grid_search(data = dat, processing = 'sequential')
grid_search(data = dat, progressbar = F)
library(furr)
library(furrr)
source("~/FePsy/R/packages/martingalebot/R/grid_search.R")
grid_search(data = dat, progressbar = F)
l
purrr::pmap_dfr(l[[1]], backtest, data = data)
l[[1]]
data
purrr::pmap_dfr(l[[1]][,1:4], backtest, data = data)
l[[1]][,2]
purrr::pmap_dfr(l[[1]][,1], backtest, data = data)
purrr::pmap_dfr(l[[1]][,2], backtest, data = data)
purrr::pmap_dfr(l[[1]][,3], backtest, data = data)
purrr::pmap_df(l[[1]], backtest, data = data)
purrr::pmap_df(l[[1]][1,3], backtest, data = data)
data
backtest(data = data)
source("~/FePsy/R/packages/martingalebot/R/grid_search.R")
backtest(data = data)
backtest(data = dat)
dat <- get_binance_prices_from_csv('PYRUSDT', start_time = '2023-02-02',
progressbar = F)
#Perform backtesting
backtest(data = dat)
dat
dat <- get_binance_prices_from_csv('FXSUSDT', Sys.time() - lubridate::dmonths(6))
grid_search(data = dat)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
library(tidyverse)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
dat <- get_binance_prices_from_csv('RLBUSDT',
Sys.time() - lubridate::dmonths(6))
dat <- get_binance_prices_from_csv('MKRUSDT',
Sys.time() - lubridate::dmonths(6))
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
library(martingalebot)
get_binance_klines_from_csv_multi()
library(tidyverse)
library(martingalebot)
dat <- get_binance_prices_from_csv('SEIUSDT',
Sys.time() - lubridate::dmonths(3))
library(tidyverse)
library(martingalebot)
dat <- get_binance_prices_from_csv('SEIUSDT',
Sys.time() - lubridate::dmonths(2))
dat <- get_binance_prices_from_csv('SEIUSDT',
Sys.time() - lubridate::dweeks(4))
dat <- get_binance_prices_from_csv('SEIUSDT',
Sys.time() - lubridate::dweeks(3))
dat <- get_binance_prices_from_csv('TIAUSDT',
Sys.time() - lubridate::dweeks(6))
dat <- get_binance_prices_from_csv('TIAUSDT',
Sys.time() - lubridate::dweeks(5))
dat <- get_binance_prices_from_csv('TIAUSDT',
Sys.time() - lubridate::dweeks(4))
dat <- get_binance_klines('TIAUSDT',
Sys.time() - lubridate::dweeks(4))
dat <- get_binance_prices_from_csv('ROSEUSDT',
Sys.time() - lubridate::dweeks(8))
dat <- get_binance_klines('TIAUSDT',
Sys.time() - lubridate::dweeks(8))
dat
dat2 <- get_binance_prices_from_csv('ROSEUSDT',
Sys.time() - lubridate::days(2))
dat2
dat2 <- get_binance_prices_from_csv('ROSEUSDT',
Sys.time() - lubridate::days(3))
dat2
dat <- get_binance_klines('TIAUSDT',
Sys.time() - lubridate::dweeks(8)) %>%
select(time = open_time, price = open)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
dat <- get_binance_klines('SEIUSDT',
Sys.time() - lubridate::dweeks(8)) %>%
select(time = open_time, price = open)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
200/12
library(lubridate)
as.Date('2024-02-22')
seq(as.Date('2024-02-22'), by = 7)
seq(as.Date('2024-02-22'), by = 7, length.out = 7)
tibble(seq(as.Date('2024-02-22'), by = 7, length.out = 13))
as.tibble(seq(as.Date('2024-02-22'), by = 7, length.out = 13))
library(tidyverse)
tibble(Donnerstag = seq(as.Date('2024-02-22'), by = 7, length.out = 13))
tibble(Mittwoch = seq(as.Date('2024-02-21'), by = 7, length.out = 13),
Donnerstag = Mittwoch + 1)
tibble(Mittwoch = seq(as.Date('2024-02-21'), by = 7, length.out = 15),
Donnerstag = Mittwoch + 1)
tibble(Mittwoch = seq(as.Date('2024-02-21'), by = 7, length.out = 16),
Donnerstag = Mittwoch + 1)
tibble(VZ23a = seq(as.Date('2024-02-29'), by = 14, length.out = 7))
library(tidyverse)
library(lubridate)
tibble(VZ23a = seq(as.Date('2024-02-29'), by = 14, length.out = 7))
install.packages('progressr')
install.packages('furrr')
install.packages('binancer')
install.packages('tidyquant')
T
install.packages('plotly')
library(martingalebot)
622379+61600
3.7/sqrt(1000)
1.96*3.7/sqrt(1000)
23.3 - 0.2293284
23.3 + 0.2293284
3.87/sqrt(111)
1.96*3.7/sqrt(1000)
5.97/sqrt(1000)
3.87±0,189*2.62
3.87+0,189*2.62
3,87+0,189*2.62
3.87+0.189*2.62
3.87-0.189*2.62
3.87-2,62*2.62
3.87-2.62*2.62
3.87+0.189*2.62
3.87-0.189*2.62
dat <- get_binance_prices_from_csv('PYRUSDT',
start_time = '2022-12-01',
end_time = '2023-03-01',
progressbar = F)
install.packages('binancer')
install.packages('TTR')
install.packages('tidyquant')
install.packages('plotly')
install.packages("plotly")
dat <- get_binance_prices_from_csv('PYRUSDT',
start_time = '2022-12-01',
end_time = '2023-03-01',
progressbar = F)
backtest(data = dat)
backtest(data = dat)
library(tidyverse)
library(martingalebot)
dat <- get_binance_klines('SEIUSDT',
Sys.time() - lubridate::dweeks(15)) %>%
select(time = open_time, price = open)
grid_search(data = dat) %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
backtest()
backtest(data = dat)
backtest(data = dat, plot = T)
library(tidyverse)
library(martingalebot)
dat <- get_binance_klines('SEIUSDT',
Sys.time() - lubridate::dweeks(15)) %>%
select(time = open_time, price = open)
res <- grid_search(data = dat)
res
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
backtest
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
p
interactive()
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
p <- plotly::ggplotly(p, height = if (interactive())  NULL else 700) |>
plotly::layout(margin = list(t = 100)) |>
plotly::layout(title = list(text = paste0(
'Bot profit: ', round(output[[1]]$profit, 1),
' %; Max draw down: ', round(output[[1]]$max_draw_down, 1),
' % <br><sup>', paste0('Safety orders: ', n_safety_orders,
', Price scale: ', round(pricescale, 1),
', Volume scale: ', round(volumescale, 1),
', Take profit: ', round(take_profit, 1),
', Step scale: ', round(stepscale, 1),
', Stoploss: ', round(stoploss, 1),
', Start ASAP: ', start_asap), '</sup>')))
p
print(p)
if (!interactive()) {
htmltools::tagList(p)
} else {
print(p)
tibble::tibble(output[[1]])
}
p
!interactive()
htmltools::tagList(p)
print(p)
tibble::tibble(output[[1]])
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
rlang::last_trace()
res %>%
slice(1)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
a
a
a
class(a)
print(a)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
print(a)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
print(p)
p
p <- df |>
dplyr::select(Time, Price, Capital) |>
tidyr::pivot_longer(Price:Capital) |>
ggplot2::ggplot(ggplot2::aes(y = value, x = Time)) +
ggplot2::geom_path() +
ggplot2::geom_point(data = buys, ggplot2::aes(x = Time, y = Price),
size = 1.6, color = 'red') +
ggplot2::geom_point(data = sells, ggplot2::aes(x = Time, y = Price),
size = 1.4, color = 'green') +
ggplot2::geom_point(data = stoplosses, ggplot2::aes(x = Time, y = Price),
size = 1.6, color = 'blue') +
ggplot2::facet_wrap(. ~ name, ncol = 1, scales = 'free') +
ggplot2::labs(title = 'title', y = NULL, x = NULL) +
tidyquant::theme_tq()
p
p <- plotly::ggplotly(p, height = if (interactive())  NULL else 700) |>
plotly::layout(margin = list(t = 100)) |>
plotly::layout(title = list(text = paste0(
'Bot profit: ', round(output[[1]]$profit, 1),
' %; Max draw down: ', round(output[[1]]$max_draw_down, 1),
' % <br><sup>', paste0('Safety orders: ', n_safety_orders,
', Price scale: ', round(pricescale, 1),
', Volume scale: ', round(volumescale, 1),
', Take profit: ', round(take_profit, 1),
', Step scale: ', round(stepscale, 1),
', Stoploss: ', round(stoploss, 1),
', Start ASAP: ', start_asap), '</sup>')))
p
print(p)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
backtest(data = dat, plot = T)
backtest(data = dat, plot = T)
print(p)
htmltools::tagList(p)
print(p)
p
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
a
unlist(a)
a
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
a
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
a
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
a
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
print(plotly::ggplotly(gg))
gg
plotly::ggplotly(gg)
gg
plotly::ggplotly(gg)
gg
plotly::ggplotly(gg)
remotes::install_github("plotly/plotly")
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
gg
plotly::ggplotly(gg)
gg <- df |>
dplyr::select(Time, Price, Capital) |>
tidyr::pivot_longer(Price:Capital) |>
ggplot2::ggplot(ggplot2::aes(y = value, x = Time)) +
ggplot2::geom_path()
gg
plotly::ggplotly(gg)
plotly::ggplotly(gg, width = 400, height = 400)
plotly::ggplotly(gg, width = 200, height = 200)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
a = backtest(data = dat, plot = T)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
source("~/FePsy/R/packages/martingalebot/R/backtest.R", echo=TRUE)
res %>%
slice(1) %>%
pmap_df(backtest, data = dat, plot = T)
dat <- get_binance_klines_from_csv('SEIUSDT',
Sys.time() - lubridate::dweeks(15)) %>%
select(time = open_time, price = open)
dat <- get_binance_klines_from_csv('SEIUSDT',
Sys.time() - lubridate::dweeks(5)) %>%
select(time = open_time, price = open)
