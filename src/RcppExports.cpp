// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// botCfun
List botCfun(double base_order_volume, double first_safety_order_volume, int n_safety_orders, double take_profit, double pricescale, double volumescale, double pricemult, double stoploss, double trading_fee, bool show_trades, bool plot, bool start_asap, bool compound, NumericVector price, DatetimeVector date, LogicalVector deal_start);
RcppExport SEXP _martingalebot_botCfun(SEXP base_order_volumeSEXP, SEXP first_safety_order_volumeSEXP, SEXP n_safety_ordersSEXP, SEXP take_profitSEXP, SEXP pricescaleSEXP, SEXP volumescaleSEXP, SEXP pricemultSEXP, SEXP stoplossSEXP, SEXP trading_feeSEXP, SEXP show_tradesSEXP, SEXP plotSEXP, SEXP start_asapSEXP, SEXP compoundSEXP, SEXP priceSEXP, SEXP dateSEXP, SEXP deal_startSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type base_order_volume(base_order_volumeSEXP);
    Rcpp::traits::input_parameter< double >::type first_safety_order_volume(first_safety_order_volumeSEXP);
    Rcpp::traits::input_parameter< int >::type n_safety_orders(n_safety_ordersSEXP);
    Rcpp::traits::input_parameter< double >::type take_profit(take_profitSEXP);
    Rcpp::traits::input_parameter< double >::type pricescale(pricescaleSEXP);
    Rcpp::traits::input_parameter< double >::type volumescale(volumescaleSEXP);
    Rcpp::traits::input_parameter< double >::type pricemult(pricemultSEXP);
    Rcpp::traits::input_parameter< double >::type stoploss(stoplossSEXP);
    Rcpp::traits::input_parameter< double >::type trading_fee(trading_feeSEXP);
    Rcpp::traits::input_parameter< bool >::type show_trades(show_tradesSEXP);
    Rcpp::traits::input_parameter< bool >::type plot(plotSEXP);
    Rcpp::traits::input_parameter< bool >::type start_asap(start_asapSEXP);
    Rcpp::traits::input_parameter< bool >::type compound(compoundSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type price(priceSEXP);
    Rcpp::traits::input_parameter< DatetimeVector >::type date(dateSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type deal_start(deal_startSEXP);
    rcpp_result_gen = Rcpp::wrap(botCfun(base_order_volume, first_safety_order_volume, n_safety_orders, take_profit, pricescale, volumescale, pricemult, stoploss, trading_fee, show_trades, plot, start_asap, compound, price, date, deal_start));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_martingalebot_botCfun", (DL_FUNC) &_martingalebot_botCfun, 16},
    {NULL, NULL, 0}
};

RcppExport void R_init_martingalebot(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
